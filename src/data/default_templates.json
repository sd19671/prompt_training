[
  {
    "id": 0,
    "name": "readme-generator",
    "description": "Generates professional README files for software projects",
    "version": "1.0.0",
    "template": "Create a comprehensive README.md for a {language} project named '{projectName}' that {purpose}. Include the following sections: Project Overview, Installation, Usage, Configuration, API Reference, Contributing Guidelines, and License. The project requires {dependencies} and uses {buildTools} for building. Deployment is handled with {deploymentMethod}.",
    "variables": {
      "language": {
        "type": "string",
        "description": "Programming language (e.g., JavaScript, Python, Go, Rust)",
        "required": true
      },
      "projectName": {
        "type": "string",
        "description": "Name of the project",
        "required": true
      },
      "purpose": {
        "type": "string",
        "description": "Brief description of what the project does",
        "required": true
      },
      "dependencies": {
        "type": "string",
        "description": "Main dependencies or frameworks",
        "required": true
      },
      "buildTools": {
        "type": "string",
        "description": "Build tools used (e.g., Webpack, Vite, Maven)",
        "required": true
      },
      "deploymentMethod": {
        "type": "string",
        "description": "How the project is deployed",
        "required": true
      }
    },
    "patterns": [
      "Output Automater",
      "Template"
    ],
    "tags": [
      "documentation",
      "project-setup",
      "onboarding"
    ],
    "author": "sldugan",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4, Claude 3.5",
    "usageLimitations": "May not handle very large projects well",
    "tokenCount": 1500,
    "userFeedbackScore": 4.5,
    "governance": {
      "canModify": "sldugan",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Low"
  },
  {
    "id": 1,
    "name": "sql-query-generator",
    "description": "Generates SQL queries based on natural language input",
    "version": "1.0.0",
    "template": "Write a SQL query that {action} from the {tableName} table. The query should {requirements}",
    "variables": {
      "action": {
        "type": "string",
        "description": "The main query action (select, update, delete)",
        "required": true
      },
      "tableName": {
        "type": "string",
        "description": "Target database table name",
        "required": true
      },
      "requirements": {
        "type": "string",
        "description": "Specific query requirements",
        "required": true
      }
    },
    "patterns": [
      "Output Automater"
    ],
    "tags": [
      "database",
      "sql",
      "query"
    ],
    "author": "data-team",
    "lastModified": "2024-02-07",
    "compatibility": "GPT-4",
    "usageLimitations": "Complex queries may require manual adjustments",
    "tokenCount": 800,
    "userFeedbackScore": 4.2,
    "governance": {
      "canModify": "data-team",
      "lastReviewed": "2024-02-07",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  },
  {
    "id": 2,
    "name": "code-reviewer",
    "description": "Reviews code changes and provides feedback",
    "version": "1.0.0",
    "template": "Review this {language} code for {focusAreas}:\n\n```{language}\n{codeBlock}\n```",
    "variables": {
      "language": {
        "type": "string",
        "description": "Programming language",
        "required": true
      },
      "focusAreas": {
        "type": "string",
        "description": "Specific areas to review (security, performance, style)",
        "required": true
      },
      "codeBlock": {
        "type": "string",
        "description": "Code to review",
        "required": true
      }
    },
    "patterns": [
      "Persona"
    ],
    "tags": [
      "code-review",
      "security",
      "quality"
    ],
    "author": "security-team",
    "lastModified": "2024-02-07",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very large codebases well",
    "tokenCount": 1200,
    "userFeedbackScore": 4.3,
    "governance": {
      "canModify": "security-team",
      "lastReviewed": "2024-02-07",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "High"
  },
  {
    "id": 3,
    "name": "financial-report-analyzer",
    "description": "Analyzes financial statements and provides insights",
    "version": "1.0.0",
    "template": "Analyze the following {reportType} financial metrics: {metrics}. Focus on {analysisType} with a threshold of {threshold}%",
    "variables": {
      "reportType": {
        "type": "string",
        "description": "Type of financial report",
        "required": true
      },
      "metrics": {
        "type": "string",
        "description": "List of metrics to analyze",
        "required": true
      },
      "analysisType": {
        "type": "string",
        "description": "Type of analysis required",
        "required": true
      },
      "threshold": {
        "type": "number",
        "description": "Analysis threshold percentage",
        "required": true
      }
    },
    "patterns": [
      "Template",
      "Meta Language Creation"
    ],
    "tags": [
      "finance",
      "analysis",
      "reporting"
    ],
    "author": "finance-team",
    "lastModified": "2024-02-07",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very large datasets well",
    "tokenCount": 1000,
    "userFeedbackScore": 4.4,
    "governance": {
      "canModify": "finance-team",
      "lastReviewed": "2024-02-07",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "High"
  },
  {
    "id": 4,
    "name": "api-doc-generator",
    "description": "Generates API documentation from code",
    "version": "1.0.0",
    "template": "Create {format} documentation for this {apiType} API endpoint:\n\n{endpoint}\n\nInclude {docRequirements}",
    "variables": {
      "format": {
        "type": "string",
        "description": "Documentation format (OpenAPI, Markdown)",
        "required": true
      },
      "apiType": {
        "type": "string",
        "description": "Type of API (REST, GraphQL)",
        "required": true
      },
      "endpoint": {
        "type": "string",
        "description": "API endpoint code",
        "required": true
      },
      "docRequirements": {
        "type": "string",
        "description": "Specific documentation requirements",
        "required": false
      }
    },
    "patterns": [
      "Output Automater",
      "Template"
    ],
    "tags": [
      "api",
      "documentation",
      "development"
    ],
    "author": "sldugan",
    "lastModified": "2024-02-07",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very large APIs well",
    "tokenCount": 900,
    "userFeedbackScore": 4.3,
    "governance": {
      "canModify": "sldugan",
      "lastReviewed": "2024-02-07",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  },
  {
    "id": 5,
    "name": "risk-assessor",
    "description": "Assesses operational risks in financial processes",
    "version": "1.0.0",
    "template": "Evaluate the {riskType} risks for process: {process}. Consider compliance with {regulations} and impact level {impactLevel}",
    "variables": {
      "riskType": {
        "type": "string",
        "description": "Type of risk to assess",
        "required": true
      },
      "process": {
        "type": "string",
        "description": "Process to evaluate",
        "required": true
      },
      "regulations": {
        "type": "string",
        "description": "Applicable regulations",
        "required": true
      },
      "impactLevel": {
        "type": "number",
        "description": "Impact level (1-5)",
        "required": true
      }
    },
    "patterns": [
      "Recipe",
      "Template"
    ],
    "tags": [
      "risk",
      "compliance",
      "finance"
    ],
    "author": "risk-team",
    "lastModified": "2024-02-07",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very complex processes well",
    "tokenCount": 1100,
    "userFeedbackScore": 4.2,
    "governance": {
      "canModify": "risk-team",
      "lastReviewed": "2024-02-07",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "High"
  },
  {
    "id": 6,
    "name": "dependency-vulnerability-checker",
    "description": "Analyzes dependency vulnerability reports and suggests actions",
    "version": "1.0.0",
    "template": "Review the attached dependency vulnerability report for a {framework} application using {packageManager}. For each vulnerability with severity level higher than {severityThreshold}, provide:\n\n1. A brief explanation of the vulnerability\n2. Whether it should be fixed immediately or can wait\n3. The recommended version to upgrade to\n4. Any breaking changes to be aware of when upgrading\n\nFinally, provide a prioritized action plan for addressing these vulnerabilities.",
    "variables": {
      "framework": {
        "type": "string",
        "description": "Framework or main technology (React, Spring Boot, Django, etc.)",
        "required": true
      },
      "packageManager": {
        "type": "string",
        "description": "Package manager used (npm, pip, maven, etc.)",
        "required": true
      },
      "severityThreshold": {
        "type": "string",
        "description": "Minimum severity level to address (Low, Medium, High, Critical)",
        "required": true
      }
    },
    "patterns": [
      "Template",
      "Recipe"
    ],
    "tags": [
      "security",
      "dependencies",
      "maintenance"
    ],
    "author": "security-team",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very large dependency trees well",
    "tokenCount": 1300,
    "userFeedbackScore": 4.4,
    "governance": {
      "canModify": "security-team",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "High"
  },
  {
    "id": 7,
    "name": "serverless-function-generator",
    "description": "Generates AWS Lambda functions with required configurations",
    "version": "1.0.0",
    "template": "Create an AWS Lambda function in {language} that {functionPurpose}. Include proper error handling, logging, and AWS SDK integration. The function should use the following environment variables: {envVars}. Set the timeout to {timeoutDuration} seconds and memory allocation to {memorySize} MB. Include a sample serverless.yml/SAM template configuration that includes necessary permissions for {requiredPermissions}.",
    "variables": {
      "language": {
        "type": "string",
        "description": "Programming language for Lambda (Node.js, Python, Java, etc.)",
        "required": true
      },
      "functionPurpose": {
        "type": "string",
        "description": "What the Lambda function should do",
        "required": true
      },
      "envVars": {
        "type": "string",
        "description": "Environment variables needed (comma-separated)",
        "required": true
      },
      "timeoutDuration": {
        "type": "number",
        "description": "Function timeout in seconds",
        "required": true
      },
      "memorySize": {
        "type": "number",
        "description": "Memory allocation in MB",
        "required": true
      },
      "requiredPermissions": {
        "type": "string",
        "description": "AWS services this Lambda needs access to",
        "required": true
      }
    },
    "patterns": [
      "Output Automater",
      "Template"
    ],
    "tags": [
      "aws",
      "serverless",
      "lambda",
      "cloud"
    ],
    "author": "sldugan",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very complex functions well",
    "tokenCount": 1400,
    "userFeedbackScore": 4.5,
    "governance": {
      "canModify": "cloud-team",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  },
  {
    "id": 8,
    "name": "terraform-module-generator",
    "description": "Creates Terraform modules with appropriate structure and documentation",
    "version": "1.0.0",
    "template": "Create a Terraform module for {awsService} that provisions resources for {purpose}. The module should include the following features: {features}. Use Terraform {terraformVersion} syntax and follow best practices for variable definitions, outputs, and documentation. Include example usage in the README and ensure all resources have appropriate tagging support. The module should handle {highAvailabilityRequirements} for high availability.",
    "variables": {
      "awsService": {
        "type": "string",
        "description": "AWS service to provision (e.g., ECS, RDS, DynamoDB)",
        "required": true
      },
      "purpose": {
        "type": "string",
        "description": "What the infrastructure will be used for",
        "required": true
      },
      "features": {
        "type": "string",
        "description": "Specific features to implement in the module",
        "required": true
      },
      "terraformVersion": {
        "type": "string",
        "description": "Terraform version (e.g., 0.13+, 1.0+)",
        "required": true
      },
      "highAvailabilityRequirements": {
        "type": "string",
        "description": "High availability requirements (multi-AZ, failover, etc.)",
        "required": true
      }
    },
    "patterns": [
      "Output Automater",
      "Template"
    ],
    "tags": [
      "terraform",
      "iac",
      "aws",
      "infrastructure"
    ],
    "author": "sldugan",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very complex modules well",
    "tokenCount": 1600,
    "userFeedbackScore": 4.6,
    "governance": {
      "canModify": "infra-team",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  },
  {
    "id": 9,
    "name": "code-review-checklist",
    "description": "Creates a customized code review checklist based on project context",
    "version": "1.0.0",
    "template": "Create a comprehensive code review checklist for a {language} {projectType} project with {securityRequirements} security requirements. Include checks for code quality, performance, security, and maintainability. Add specific checks for {frameworkName} framework best practices and checks related to {specificConcerns}.",
    "variables": {
      "language": {
        "type": "string",
        "description": "Programming language (e.g., Java, TypeScript, Go)",
        "required": true
      },
      "projectType": {
        "type": "string",
        "description": "Type of project (e.g., microservice, web app, mobile app)",
        "required": true
      },
      "securityRequirements": {
        "type": "string",
        "description": "Security level required (e.g., standard, high, financial, health)",
        "required": true
      },
      "frameworkName": {
        "type": "string",
        "description": "Main framework used (e.g., React, Spring Boot, Django)",
        "required": true
      },
      "specificConcerns": {
        "type": "string",
        "description": "Specific areas of concern for this project",
        "required": false
      }
    },
    "patterns": [
      "Template",
      "Recipe"
    ],
    "tags": [
      "code-review",
      "quality",
      "best-practices"
    ],
    "author": "sldugan",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very large projects well",
    "tokenCount": 1500,
    "userFeedbackScore": 4.5,
    "governance": {
      "canModify": "quality-team",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  },
  {
    "id": 10,
    "name": "database-migration-generator",
    "description": "Creates database migration scripts with proper validation and rollback",
    "version": "1.0.0",
    "template": "Create a {databaseType} migration script that {migrationPurpose}. Include the following changes: {schemaChanges}. Ensure the migration is idempotent, includes proper error handling, and has a rollback procedure. The migration should validate {validationChecks} before proceeding and should handle data of size approximately {dataSize}. Use {migrationTool} for the migration implementation.",
    "variables": {
      "databaseType": {
        "type": "string",
        "description": "Database type (PostgreSQL, MySQL, MongoDB, etc.)",
        "required": true
      },
      "migrationPurpose": {
        "type": "string",
        "description": "Purpose of the migration",
        "required": true
      },
      "schemaChanges": {
        "type": "string",
        "description": "Schema changes to make (add/modify tables, indexes, etc.)",
        "required": true
      },
      "validationChecks": {
        "type": "string",
        "description": "What to validate before proceeding",
        "required": true
      },
      "dataSize": {
        "type": "string",
        "description": "Approximate size of data affected",
        "required": true
      },
      "migrationTool": {
        "type": "string",
        "description": "Migration tool to use (Flyway, Liquibase, etc.)",
        "required": true
      }
    },
    "patterns": [
      "Output Automater",
      "Template"
    ],
    "tags": [
      "database",
      "migration",
      "schema"
    ],
    "author": "db-team",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very large migrations well",
    "tokenCount": 1400,
    "userFeedbackScore": 4.4,
    "governance": {
      "canModify": "db-team",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  },
  {
    "id": 11,
    "name": "api-documentation-generator",
    "description": "Creates detailed API documentation for endpoints",
    "version": "1.0.0",
    "template": "Generate {format} documentation for a {apiType} API endpoint that {endpointPurpose}. Include full details on request parameters, response format, authentication requirements, error codes, and rate limiting. The endpoint uses {authMethod} for authentication and supports {supportedFormats} response formats. Include examples for common use cases and edge cases.",
    "variables": {
      "format": {
        "type": "string",
        "description": "Documentation format (OpenAPI, Swagger, Markdown, etc.)",
        "required": true
      },
      "apiType": {
        "type": "string",
        "description": "Type of API (REST, GraphQL, gRPC, etc.)",
        "required": true
      },
      "endpointPurpose": {
        "type": "string",
        "description": "What the endpoint does",
        "required": true
      },
      "authMethod": {
        "type": "string",
        "description": "Authentication method used",
        "required": true
      },
      "supportedFormats": {
        "type": "string",
        "description": "Supported response formats (JSON, XML, etc.)",
        "required": true
      }
    },
    "patterns": [
      "Output Automater",
      "Template"
    ],
    "tags": [
      "api",
      "documentation",
      "swagger",
      "openapi"
    ],
    "author": "api-team",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very large APIs well",
    "tokenCount": 1300,
    "userFeedbackScore": 4.5,
    "governance": {
      "canModify": "api-team",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  },
  {
    "id": 12,
    "name": "cicd-pipeline-generator",
    "description": "Creates CI/CD pipeline configurations for different platforms",
    "version": "1.0.0",
    "template": "Create a {cicdPlatform} pipeline configuration for a {language} project that performs the following stages: {stages}. The pipeline should run on {triggerEvents} and include notifications to {notificationChannels}. Include appropriate caching strategies for dependencies and build artifacts. Security scanning should be performed using {securityTools} and tests should be run using {testingFrameworks}.",
    "variables": {
      "cicdPlatform": {
        "type": "string",
        "description": "CI/CD platform (GitHub Actions, GitLab CI, Jenkins, etc.)",
        "required": true
      },
      "language": {
        "type": "string",
        "description": "Programming language of the project",
        "required": true
      },
      "stages": {
        "type": "string",
        "description": "Pipeline stages (build, test, deploy, etc.)",
        "required": true
      },
      "triggerEvents": {
        "type": "string",
        "description": "Events that trigger the pipeline",
        "required": true
      },
      "notificationChannels": {
        "type": "string",
        "description": "Where to send notifications",
        "required": true
      },
      "securityTools": {
        "type": "string",
        "description": "Security scanning tools to use",
        "required": true
      },
      "testingFrameworks": {
        "type": "string",
        "description": "Testing frameworks to use",
        "required": true
      }
    },
    "patterns": [
      "Output Automater",
      "Template"
    ],
    "tags": [
      "ci-cd",
      "devops",
      "pipeline",
      "automation"
    ],
    "author": "devops-team",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very complex pipelines well",
    "tokenCount": 1500,
    "userFeedbackScore": 4.5,
    "governance": {
      "canModify": "devops-team",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  },
  {
    "id": 13,
    "name": "performance-optimization-analyzer",
    "description": "Analyzes code or systems for performance bottlenecks and suggests improvements",
    "version": "1.0.0",
    "template": "Analyze the {codeOrSystem} for performance issues, focusing on {performanceConcerns}. The system currently handles {currentLoad} and needs to scale to {targetLoad}. Consider that the main performance bottlenecks might be in {suspectedBottlenecks}. Provide specific, actionable recommendations for improving performance, with expected impact estimates for each recommendation. Include both quick wins and long-term architectural improvements.",
    "variables": {
      "codeOrSystem": {
        "type": "string",
        "description": "Code snippet or system description to analyze",
        "required": true
      },
      "performanceConcerns": {
        "type": "string",
        "description": "Specific performance areas of concern",
        "required": true
      },
      "currentLoad": {
        "type": "string",
        "description": "Current load or performance metrics",
        "required": true
      },
      "targetLoad": {
        "type": "string",
        "description": "Target performance goals",
        "required": true
      },
      "suspectedBottlenecks": {
        "type": "string",
        "description": "Areas suspected to be bottlenecks",
        "required": true
      }
    },
    "patterns": [
      "Analysis",
      "Recipe"
    ],
    "tags": [
      "performance",
      "optimization",
      "scaling"
    ],
    "author": "performance-team",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very large systems well",
    "tokenCount": 1400,
    "userFeedbackScore": 4.4,
    "governance": {
      "canModify": "performance-team",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  },
  {
    "id": 14,
    "name": "cloud-cost-optimizer",
    "description": "Analyzes cloud resources and suggests cost optimization strategies",
    "version": "1.0.0",
    "template": "Review the {cloudProvider} resources for cost optimization opportunities. The current monthly spend is {currentSpend} with the following resource distribution: {resourceDistribution}. Focus on optimizing {serviceTypes} services while maintaining {performanceRequirements} performance requirements. Consider whether Reserved Instances, Savings Plans, or Spot Instances might be appropriate. Provide specific recommendations with estimated monthly savings for each.",
    "variables": {
      "cloudProvider": {
        "type": "string",
        "description": "Cloud provider (AWS, Azure, GCP, etc.)",
        "required": true
      },
      "currentSpend": {
        "type": "string",
        "description": "Current monthly cloud spend",
        "required": true
      },
      "resourceDistribution": {
        "type": "string",
        "description": "How spend is distributed across resource types",
        "required": true
      },
      "serviceTypes": {
        "type": "string",
        "description": "Specific service types to focus on",
        "required": true
      },
      "performanceRequirements": {
        "type": "string",
        "description": "Performance requirements that must be maintained",
        "required": true
      }
    },
    "patterns": [
      "Analysis",
      "Recipe"
    ],
    "tags": [
      "cloud",
      "cost-optimization",
      "aws",
      "azure",
      "gcp"
    ],
    "author": "finops-team",
    "lastModified": "2025-02-27",
    "compatibility": "GPT-4",
    "usageLimitations": "May not handle very large cloud environments well",
    "tokenCount": 1300,
    "userFeedbackScore": 4.5,
    "governance": {
      "canModify": "finops-team",
      "lastReviewed": "2025-02-27",
      "approvalRequirements": "Team lead approval"
    },
    "dataPrivacyLevel": "Medium"
  }
]